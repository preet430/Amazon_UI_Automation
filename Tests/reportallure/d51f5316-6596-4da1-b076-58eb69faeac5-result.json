{"name": "test_login[test_list_item0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6A11C5355+78597]\n\tGetHandleVerifier [0x00007FF6A11C53B0+78688]\n\t(No symbol) [0x00007FF6A0F791AA]\n\t(No symbol) [0x00007FF6A0F8F524]\n\t(No symbol) [0x00007FF6A0F8DFF3]\n\t(No symbol) [0x00007FF6A0F817E9]\n\t(No symbol) [0x00007FF6A0F7F66F]\n\t(No symbol) [0x00007FF6A0F83B1C]\n\t(No symbol) [0x00007FF6A0F83BEF]\n\t(No symbol) [0x00007FF6A0FC8D66]\n\t(No symbol) [0x00007FF6A0FF70EA]\n\t(No symbol) [0x00007FF6A0FC1AB6]\n\t(No symbol) [0x00007FF6A0FF7300]\n\t(No symbol) [0x00007FF6A101F2BB]\n\t(No symbol) [0x00007FF6A0FF6EC3]\n\t(No symbol) [0x00007FF6A0FC03F8]\n\t(No symbol) [0x00007FF6A0FC1163]\n\tGetHandleVerifier [0x00007FF6A146EF0D+2870973]\n\tGetHandleVerifier [0x00007FF6A14696B8+2848360]\n\tGetHandleVerifier [0x00007FF6A1486993+2967875]\n\tGetHandleVerifier [0x00007FF6A11E019A+188746]\n\tGetHandleVerifier [0x00007FF6A11E847F+222255]\n\tGetHandleVerifier [0x00007FF6A11CD2D4+111236]\n\tGetHandleVerifier [0x00007FF6A11CD482+111666]\n\tGetHandleVerifier [0x00007FF6A11B35A9+5465]\n\tBaseThreadInitThunk [0x00007FF862532D92+34]\n\tRtlUserThreadStart [0x00007FF863569F64+52]", "trace": "self = <Tests.test_login.TestLogin object at 0x000000B836915D10>\ntest_list_item = {'actualItemName': 'Moto G85 5G 8GB 128GB, Olive Green, New', 'actualItemPrice': '17,169', 'invalidMobile': '1111111111', 'invalidPsw': '12345', ...}\n\n    @pytest.mark.parametrize(\"test_list_item\", test_list)\n    def test_login(self, test_list_item):\n    \n        login_page = LoginPage(self.driver) #LoginPage class object\n        login_page.open_signin() #Open signin  screen\n        login_page.invalid_mobile(test_list_item[\"invalidMobile\"]) #Signin with invalid mobile number\n>       login_page.invalid_password(test_list_item[\"validMobile\"], test_list_item[\"invalidPsw\"]) #Signin with invalid password\n\ntest_login.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\LoginPage.py:40: in invalid_password\n    password_validation_message = self.driver.find_element(*LoginPage.password_validation_alert).text\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000000B836917C50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...A11B35A9+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FF862532D92+34]\\\\n\\\\tRtlUserThreadStart [0x00007FF863569F64+52]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6A11C5355+78597]\nE       \tGetHandleVerifier [0x00007FF6A11C53B0+78688]\nE       \t(No symbol) [0x00007FF6A0F791AA]\nE       \t(No symbol) [0x00007FF6A0F8F524]\nE       \t(No symbol) [0x00007FF6A0F8DFF3]\nE       \t(No symbol) [0x00007FF6A0F817E9]\nE       \t(No symbol) [0x00007FF6A0F7F66F]\nE       \t(No symbol) [0x00007FF6A0F83B1C]\nE       \t(No symbol) [0x00007FF6A0F83BEF]\nE       \t(No symbol) [0x00007FF6A0FC8D66]\nE       \t(No symbol) [0x00007FF6A0FF70EA]\nE       \t(No symbol) [0x00007FF6A0FC1AB6]\nE       \t(No symbol) [0x00007FF6A0FF7300]\nE       \t(No symbol) [0x00007FF6A101F2BB]\nE       \t(No symbol) [0x00007FF6A0FF6EC3]\nE       \t(No symbol) [0x00007FF6A0FC03F8]\nE       \t(No symbol) [0x00007FF6A0FC1163]\nE       \tGetHandleVerifier [0x00007FF6A146EF0D+2870973]\nE       \tGetHandleVerifier [0x00007FF6A14696B8+2848360]\nE       \tGetHandleVerifier [0x00007FF6A1486993+2967875]\nE       \tGetHandleVerifier [0x00007FF6A11E019A+188746]\nE       \tGetHandleVerifier [0x00007FF6A11E847F+222255]\nE       \tGetHandleVerifier [0x00007FF6A11CD2D4+111236]\nE       \tGetHandleVerifier [0x00007FF6A11CD482+111666]\nE       \tGetHandleVerifier [0x00007FF6A11B35A9+5465]\nE       \tBaseThreadInitThunk [0x00007FF862532D92+34]\nE       \tRtlUserThreadStart [0x00007FF863569F64+52]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "stdout", "source": "841ab8b8-8394-4c4b-9b2a-b6222fcacd5f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_list_item", "value": "{'invalidMobile': '1111111111', 'validMobile': '6357303423', 'invalidPsw': '12345', 'validPsw': '150400107044@Apreet', 'loginUserFirstName': 'Preet', 'userFullName': 'Preet Patel', 'userProfileImagePath': 'C:\\\\Users\\\\pat\\\\Desktop\\\\Seleniym+Python Notes\\\\preet.jpg', 'searchItemName': 'moto g85 5g', 'actualItemName': 'Moto G85 5G 8GB 128GB, Olive Green, New', 'actualItemPrice': '17,169'}"}], "start": 1745295928142, "stop": 1745295947349, "uuid": "f97fed72-dc7f-445e-96e9-6e1cef9f2380", "historyId": "e4537f556177769929108aaf6a17ef79", "testCaseId": "b62a022e3184708d2d40012e446c9b1d", "fullName": "test_login.TestLogin#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser_setup')"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-VERF78C"}, {"name": "thread", "value": "8452-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}